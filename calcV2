.model small
.stack 100h
.data 
                
outputBuffer db 5,0 5 dup ('$')
first_number db 7,0,7 dup('$') 
second_number db 7,0,7 dup('$')   

first_num dw 0
second_num dw 0    
and_num dw 0
or_num dw 0
xor_num dw 0 

flagNeg db 0
              
string_n db 0dh, 0ah, '$' 
string_ov db 0dh, 0ah, 'Overflow',0dh,0ah,'$'
string_new db 'Please enter again number: ','$'                                  
enterFirstNumMsg db "Enter first number: ", '$'
firstNumMsg db 0dh, 0ah, "First number: ", 0dh, 0ah, '$'
secondNumMsg db 0dh, 0ah, "Second number: ", 0dh, 0ah, '$'
enterSecondNumMsg db 0dh, 0ah, "Enter second number: ", '$'

andResMsg db 0dh, 0ah, "And result: ", '$'
orResMsg db 0dh, 0ah, "Or result: ",  '$'
xorResMsg db 0dh, 0ah, "Xor result: ", '$'

notFirstResMsg db 0dh, 0ah, "Not result (first number): $"
shlFirstResMsg db 0dh, 0ah, "SHL result (first number): $"
shrFirstResMsg db 0dh, 0ah, "SHR result (first number): $"
rolFirstResMsg db 0dh, 0ah, "ROl result (first number): $"

notSecondResMsg db 0dh, 0ah, "Not result (second number): $"
shlSecondResMsg db 0dh, 0ah, "SHL result (second number): $"
shrSecondResMsg db 0dh, 0ah, "SHR result (second number): $"
rolSecondResMsg db 0dh, 0ah, "ROL result (second number): $"

ErrorMsg db 0dh, 0ah, "Error: not a number!$", 0dh, 0ah, '$'                             

.code

output macro str
    mov ah,9 
    mov dx,offset str
    int 21h
    xor ax,ax
endm 
 
start: 
    mov ax,@data
    mov ds,ax  
    
    output enterFirstNumMsg    
    lea bx,first_number
    call input
    mov first_num,ax        
    output string_n  
    
    output enterSecondNumMsg        
    lea bx,second_number
    call input
    mov second_num,ax
    output string_n 
;//////////////////////////////////////////////////////////    
    call and_proc
    mov ax,and_num
    push ax
    output andResMsg
    pop ax
    push ax
    call to_string
    pop ax
    output string_n 

    call or_proc
    mov ax,or_num
    push ax
    output orResMsg
    pop ax  
    push ax
    call to_string 
    pop ax
    output string_n 

    call xor_proc 
    mov ax,xor_num
    push ax
    output xorResMsg
    pop ax       
    push ax
    call to_string
    pop ax
    output string_n
                         ;First number: not, shl, shr, rol 
    output notFirstResMsg
    mov ax,first_num
    call not_proc
    push ax
    call to_string
    pop ax
    output string_n
    
    output shlFirstResMsg
    mov ax, first_num
    shl ax, 4
    lea si, outputBuffer
    call wordToHex
    lea dx, outputBuffer
    call puts 
    
    output shrFirstResMsg
    mov ax, first_num
    shr ax, 4
    lea si, outputBuffer
    call wordToHex
    lea dx, outputBuffer
    call puts
    
    output rolFirstResMsg
    mov ax, first_num
    rol ax, 4
    lea si, outputBuffer
    call wordToHex
    lea dx, outputBuffer
    call puts
                         ;Second number: not, shl, shr, rol 
    output string_n
    output notSecondResMsg
    mov ax,second_num
    call not_proc
    push ax
    call to_string
    pop ax
    output string_n
    
    output shlSecondResMsg
    mov ax, second_num
    shl ax, 4
    lea si, outputBuffer
    call wordToHex
    lea dx, outputBuffer
    call puts 
    
    output shrSecondResMsg
    mov ax, second_num
    shr ax, 4
    lea si, outputBuffer
    call wordToHex
    lea dx, outputBuffer
    call puts
    
    output rolSecondResMsg
    mov ax, second_num
    rol ax, 4
    lea si, outputBuffer
    call wordToHex
    lea dx, outputBuffer
    call puts
    
end:   
int 20h
;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
input proc
st_new:    
    mov ah,0ah    ;schitivaem stroku
    mov dx,bx     ;adres dx-kuda zapisivaem
    int 21h
    
    xor cx,cx
    mov cl,[bx+1] ;v cl nasha dlina
    
    push bx       ;bx - ukazivaet na nachalo nashego chisla
    add bx,2
    add bx,cx
    mov [bx],36   ;zapisivaem vmesto 0dh v poslednii simvol '$'
    pop bx
    
    call atoi     ;perevodim stroku v chislo
    cmp cx,3      ;esli 3 znachit v atoi bilo perepolnenie ili ne cifra
    je st_new
    ret
input endp 

atoi proc
                  ;bx=16,dx-cifra,ax-result,
                  ;di - ukazivaet na nachalo stroki
    push bx
    mov di,bx
    add di,2
    
    xor ax,ax
    xor bx,bx
    xor cx,cx
    
    mov bx,10h
    
    cmp [di],'-'      ;soxranayem znak v cx i v konce sdelaen neg esli nado budet
    jne positive
    
otric:
    mov cx,1    ;1 - otricatel'noe
    push cx  
    inc di
    jmp my_neg_loop  

my_neg_loop:
    imul bx     ;ax=ax*10h
    
    jo pere     ;proverka na perepolnenie pri umnoshenii
    
    xor dx,dx   ;v dx pomeshaem cifru
    mov dl,[di]
    call cifra  ;proverka yavlaetsa simvol cifroi
                ;esli posle etogo cx=1 to znacit v stroke bila ne cifra
    cmp cx,1
    je ne_cifra_end
    cmp cx,2
    je letter_neg
    sub dl,'0'
    sub ax,dx
    jo pere     ;proverka na perepolnenie pri add
    jmp go_next_neg
letter_neg:
    sub dl,55
    sub ax,dx
    jo pere     ;proverka na perepolnenie pri add
go_next_neg:    
    inc di
    cmp [di],'$';proverka na konec stroku
    je gotovo
jmp my_neg_loop
      
positive:
    mov cx,0    ;positiv
    push cx
    jmp my_loop
        
my_loop:
    imul bx     ;ax=ax*10h 
    
    jo pere     ;proverka na perepolnenie pri umnoshenii
    
    xor dx,dx   ;v dx pomeshaem cifru
    mov dl,[di]
    call cifra  ;proverka yavlaetsa simvol cifroi
                ;esli posle etogo cx=1 to znacit v stroke bila ne cifra
    cmp cx,1
    je ne_cifra_end
    cmp cx,2
    je letter
    sub dl,'0'
    add ax,dx
    jo pere;proverka na perepolnenie pri add
    jmp go_next
letter:
    sub dl,55
    add ax,dx
    jo pere;proverka na perepolnenie pri add
go_next:    
    inc di
    cmp [di],'$';proverka na konec stroku
    je gotovo
jmp my_loop
;;
ne_cifra_end:
    pop cx
    mov cx,3   
    pop bx
    output ErrorMsg
    output string_n
    output string_new
    ret
pere: 
    pop cx
    mov cx,3
    pop bx
    ;output string_n
    output string_ov 
    output string_new
    ret   
gotovo:
    pop cx
    cmp cx,1
    jne return
    neg ax; ax=-ax   
return:
    pop bx
    ret   
atoi endp

cifra proc
                
    cmp dl,30h  
    jb ne_cifra 
    cmp dl,39h  
    ja ne_cifra
    mov cx,0
    ret
ne_cifra:
	cmp dl,41h  
    jb ne_cifra_
    cmp dl,46h  
    ja ne_cifra_
	mov cx,2
    ret
ne_cifra_:
    mov cx,1        
    ret                                   
cifra endp 

to_string proc ;v ax nashe chislo
    xor cx,cx
    mov bx,10h
    test ah,80h
    js out_minus
    jmp again
out_minus: 
    push ax
    mov ah,02h
    mov dl,'-'
    int 21h
    pop ax
    neg ax
again:
    sub dx,dx
    div bx
    inc cx
    push dx
    cmp ax,0
    jne again
loop_output:
    pop dx
    add dx,30h
    cmp dx,39h
    jle no_more_9
    add dx,7
no_more_9:
    mov ah,2
    int 21h
    loop loop_output:
      
    ret
to_string endp 

and_proc proc
    xor ax,ax
    xor bx,bx
    
    mov ax,first_num
    mov bx,second_num
    
    and ax,bx
    
    mov and_num,ax
       
    ret
and_proc endp

or_proc proc
    xor ax,ax
    xor bx,bx
    
    mov ax,first_num
    mov bx,second_num
    
    or ax,bx
    
    mov or_num,ax
        
    ret
or_proc endp 

xor_proc proc
    xor ax,ax
    xor bx,bx
    
    mov ax,first_num
    mov bx,second_num
    
    xor ax,bx
    
    mov xor_num,ax
    
    ret
xor_proc endp
 
not_proc proc    
    not ax    
    ret
not_proc endp  

shr_proc proc    
    shr ax, 1    
    ret
shr_proc endp

rol_proc proc    
    rol ax, 1    
    ret
rol_proc endp 

wordToHex proc
    push ax
    push bx
    push cx
    push dx
    
    mov dx, ax
    
    rol dl, 4                            ; use rol to swap big and small nibbles
    shr dl, 4                            ; move bits to get nibble   
    call nibbleToChar
    mov [si]+3, dl                       ; write into buffer
    
    mov dx, ax
    
    shr dl, 4                            ; move bits to get the nibble
    call nibbleToChar
    mov [si]+2, dl    
    
    mov dx, ax 
    mov dl, dh
    
    rol dl, 4
    shr dl, 4
    call nibbleToChar
    mov [si]+1, dl      
    
    mov dx, ax
    mov dl, dh
    
    shr dl, 4
    call nibbleToChar
    mov [si], dl
    
    pop dx
    pop cx
    pop bx 
    pop ax
      
    ret 
wordToHex endp    
 
nibbleToChar proc
           
    cmp dl, 9                            ; if nibble is smaller than 10 it is number else - letter
    jle nibbleNumber                     ; convert into number
    add dl, 'A'-10                       ; convert into letter
    jmp nibbleToCharEnd
     
nibbleNumber:
    add dl, '0'          
    
nibbleToCharEnd:    
    ret
nibbleToChar endp 

puts proc    
    push ax        
    mov ah, 09h
    int 21h  
    pop ax
    ret              
puts endp
